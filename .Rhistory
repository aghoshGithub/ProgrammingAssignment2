## Put comments here that give an overall description of what your
## functions do
## Write a short comment describing this function
makeCacheMatrix <- function(x = matrix()) {
Inv <- NULL
setIt <- function(a) {
x <<- a
Inv <<- NULL
}
getIt <- function() x
setInv <- function(Inverse) inv <<- inverse
getInv <- function() inv
list(setIt = setIt,
getIt = getIt,
setInv = setInv,
getInv = getInv)
}
## THe ivnerse of "matrix" is computed by this function
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
Inv <- x$getInv()
if(!is.null(Inv)) {
return(Inv)
}
matr <- x$get()
Inv <- solve(matr, ...)
x$setInv(inv)
Inv
}
library(datasets)
data(iris)
?iris
iris(Sepal.Length)
View(iris)
x <- mean(iris(Sepal.Length))
?mean
View(iris)
mean (4,6)
mean(4,5,6)
x <- c(4,5,6)
mean(x)
x <- mean(iris("Sepal.Length"))
iris
x <- mean(iris("Sepal.Length",))
x <- mean(iris["Sepal.Length",])
x <- matrix(1:4,2,2)
x[2]
x
x[2,]
x[,2]
iris[,"Sepal.Length"]
y <- mean(iris[,"Sepal.Length"])
y
?apply
apply(iris(,1:4),2,mean)
apply(iris[,1:4],2, mean)
library(datasets)
data(mtcars)
view(mtcars)
?mtcars
?split
split(mtcars, mtcars$cyl)
mtcars
?tapply
?sapply
sapply(split(mtcars$mpg, mtcars$cyl), mean)
tapply(mtcars$cyl, mtcars$mpg, mean)
mtcars
x<- sapply(mtcars$cyl,mtcars$hp, mean)
x<- sapply(split(mtcars$cyl,mtcars$hp), mean)
x
split(mtcars$cyl, mtcars$hp)
x<- sapply(mtcars$cy=4,mtcars$hp), mean)
x<- sapply(mtcars$cyl=4,mtcars$hp), mean)
x<- apply(mtcars$cyl=4,mtcars$hp), mean)
x<- apply(mtcars$cyl=4,mtcars$hp), mean)
x <- apply(mtcars$hp, mtcars$cyl = "4", mean)
x <- apply(mtcars$hp, mean)
?apply
apply(mtcars, 2, mean)
apply(mtcars, mtcars$hp, mean)
mtcars
?sapply
?tapplr
?tapply
x <- mean(mtcars$hp)
x
?mean
mean(mtcars$hp, mtcars$cyl = 4)
View(mtcars)
debug(ls)
ls
iris
iris
